
define Start(par)
 {
##  A little dexterity test.
##  Move cursor to target, with noise
##  test


    gVideoWidth <- 600
    gVideoHeight <- 600

    gTolerance <- 5      #How close you have to get to the target.
    gCursorSize <- 5     #Size of the cursor
    gNoise <- 12         #noise on each sample.
    gDrift <- .3         #drift back toward center
    gSleepEasy <- 1
		
    gxpositions <- [209,584,146,209,421,250,228,157,436,409,360,64,169,319,452,367,362,220,147,474,427,274,406,79,211,351,352,480,346,425,82,199,150,407,145,94,323,189,444,444,225,279,416,376,422,411,446,381,105,424,113,276,234,176,476,227,230,205,119,188,76,453,305,176,193,479,400,222,290]
    gypositions <- [372,295,281,246,329,198,435,301,97,308,24,182,43,18,305,92,72,500,521,503,246,146,405,219,574,73,425,90,526,240,235,204,300,319,128,402,202,510,288,475,139,405,283,91,127,508,146,191,125,442,245,404,452,378,235,371,503,357,204,506,389,282,504,196,465,296,285,172,193]
    gTimeOut <-  10000  #maximum time allowed to hit target
    
	gWin <- MakeWindow()
    gHomeX <- Round(gVideoWidth/2)   # center position
    gHomeY <- Round(gVideoHeight/2)  #

    gMinDist <- 100                    # Minimum distance to target
    gMaxDist <- (gVideoHeight-20)/2    # Maximum distance to target

    fileout <- FileOpenWrite("dext-"+gSubNum+".dat")



    noiseCond <- [1,3,5,7,9,12,15,20]  ##three noise conditions; blocked
    condsize <- 10         ##trials per condition
    conds <- [9,9,3,7,20,15,9,3,15,20,20,12,5,5,12,7,9,20,5,12,9,7,9,1,5,12,5,12,5,12,7,1,9,7,5,9,15,20,15,12,5,3,1,7,3,15,20,12,7,7,15,9,12,3,20,7,5,1,1,1,7,3,3,3,1,15,3,20,3]
    Print(conds)

    inst <- "In this demo, your goal is to move the cursor to the target location.  When you move the mouse around, it will change color to give you additional information about how far you have to go.  The cursor will 'jitter' around making it difficult to exactly move to the target.  In addition, it will drift back toward the center if you do not move it. By moving your mouse around, your goal is to move to the target as quickly and efficiently as possible.
    Press the mouse button to continue."
    tb  <- EasyTextBox(inst,20,20,gWin,12,gVideoWidth-40,200)
    Draw()
    WaitForMouseButton()

    lab <- EasyLabel("Click mouse to start trial",gHomeX,gHomeY,gWin,12)
    Hide(lab)





    Hide(tb)
    ShowCursor(0)

	FilePrint(fileout,"subnum trial startx starty noise targx targy distance complete time moves")
    circ1 <- Circle(gHomeX,gHomeY,gMinDist,MakeColor("black"),0)   
    circ2 <- Circle(gHomeX,gHomeY,gMaxDist,MakeColor("black"),0)
    AddObject(circ1,gWin)
    AddObject(circ2,gWin)
    Draw()

    trial <- 1
    gtrial <- 1
    alldat <- []
    loop(noise, conds)
     {

       Show(lab)  
       Draw()
       WaitForMouseButton()
       Hide(lab)
       Draw()
   
       results <-  Trial(noise)   
       dat <- Merge([gSubNum,trial, gHomeX, gHomeY, noise],results)

       FilePrintList(fileout,Flatten(dat))
       
       alldat <- Append(alldat,dat)
       trial <- trial + 1
       gtrial <- gtrial + 1

    }

    Print(alldat)
}



define Trial(noise)
{
huur <- Nth(gxpositions,gtrial)
duur <- Nth(gypositions,gtrial)
    Draw()
    target <- RandomPolar(gMinDist, gMaxDist)
    
    max <- gMaxDist
    targ <-  DrawTarget(Nth(gxpositions,gtrial),Nth(gypositions,gtrial),gWin)
	SetMouseCursorPosition(gHomeX,gHomeY)


    origdist <- Distance([gHomeX,gHomeY],target)

    ##Set distance to something bigger than tolerance to ensure
	## we have a trial.
    dist <- gTolerance+10
    dist2 <- gTolerance+10

   x <- Circle(0,0,gCursorSize,MakeColor("black"),1)
   AddObject(x,gWin)
   count <- 0
   startTime <- GetTime()
   continue <- 1

   while (continue)
    {

	  Wait(10)
huur <- Nth(gxpositions,gtrial)
duur <- Nth(gypositions,gtrial)
	  pos <- GetMouseCursorPosition()
      curX <- Nth(pos,1)
      curY <- Nth(pos,2)
      huurduur <- [huur,duur]
      dist2 <- Distance(huurduur, pos)
      dist <- Distance(target, pos)



	  ##  Increment count if mouse has moved
      if((curX != x.x) or curY != x.y)
      {
	     count <- count + 1      
      }

      ##Change the position of marker
      pertx <- (Random()-.5)*noise + Sign(gHomeX-curX)*gDrift
      perty <- (Random()-.5)*noise + Sign(gHomeY-curY)*gDrift

      x.x <-Nth(pos,1) + pertx
      x.y <- Nth(pos,2) + perty
      SetMouseCursorPosition(x.x,x.y)      
       
	  color <- MakeHeat(dist2,max)
      x.color <- color
      Draw()


     if(dist2 <= gTolerance)
      {
        continue <- 0
        success <- 1
      }

     if((GetTime()-starttime) > gTimeOut)
      {
        continue <- 0
        success <- 0
      }
    }
	

    endtime <- GetTime()

     RemoveObject(x,gWin)
     RemoveObjects(targ,gWin)
     
	 return [huurduur,origdist,success,(endtime-starttime),count]

 }


define RandomPolar(minR,maxR)
{
   r <- minR + (maxR-minR)
   theta <- 2 * 3.14159 
   
  return [gHomeX+Floor(r * Cos(theta)), gHomeY+Floor(r*Sin(theta))]
}


define DrawTarget(huur,duur,win)
{
huur <- Nth(gxpositions,gtrial)
duur <- Nth(gypositions,gtrial)
  c1 <- Circle(huur,duur,25,MakeColor("white"),1)
  c2 <- Circle(huur,duur,20,MakeColor("black"),1)
  c3 <- Circle(huur,duur,15,MakeColor("blue"),1)
  c4 <- Circle(huur,duur,10,MakeColor("red"),1)
  c5 <- Circle(huur,duur,5,MakeColor("yellow"),1)

  AddObject(c1,win)
  AddObject(c2,win)
  AddObject(c3,win)
  AddObject(c4,win)
  AddObject(c5,win)
  return [c1,c2,c3,c4,c5]
}

##
##

define Distance(a,b)
{
	return ( Sqrt((First(a) - First(b))^2 + (Nth(a,2) - Nth(b,2))^2))
}


##
##
define MakeHeat(dist2,max)
{
	return(MakeColorRGB(256-Ceiling(256*dist2/max),Ceiling(256*dist2/max),1))
}


##
##
define RemoveObjects(list,win)
{
    loop(i,list)
    { 
      RemoveObject(i,win) 
    }
}
